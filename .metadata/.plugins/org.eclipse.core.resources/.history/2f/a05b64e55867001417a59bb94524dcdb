import se.lth.control.DoublePoint;



public class Monitor {
	
	private Regul currentRegul;
	private DoublePoint currentDp;
	private PlotData currentPd;
	private long t;
	
	public synchronized double calcOutput(double y, double yref) {
		t = System.currentTimeMillis();
		return currentRegul.calculateOutput(y, yref);
	}
	
	public synchronized void updateStateAndGui(DoublePoint dp, PlotData pd, double u) {
		currentRegul.updateState(u);
		currentDp = dp;
		currentPd = pd;
		notifyAll(); //wake up opcom to get its data
		
		// sleep
		long duration;
		t = t + currentRegul.getHMillis();
		duration = t - System.currentTimeMillis();
		if (duration > 0) {
			try {
				wait(duration);  
			} catch (InterruptedException x) {
			}
		}
	}
	
	/** called by Opcom */
	public synchronized DoublePoint getCurrentDp() {
		return currentDp;
	}
	
	/** called by Opcom */
	public synchronized PlotData getCurrentPd() {
		return currentPd;
	}
	
	
	
	
	
	
}	
	
	
	/*
	
	BeamRegul beam;
	BeamBallRegul beamBall;
	BeamBallRegul beamBallThrowSmall;
	BeamBallRegul beamBallThrowMedium;
	BeamBallRegul beamBallThrowBig;

	private Regul currentRegul;
	
	public Main(){
		beam = new BeamRegul();
		//Create other reguls
		beam.setNextRegul(beamBall);
		//Set the rest of the next
		//Do something?
		switchRegul(beam);
	}

	public synchronized void switchRegul(Regul r){
		Regul prevRegul = currentRegul;
		currentRegul = r;
		r.init(System.currentTimeMillis(), prevRegul);
		//r.start()?
	}

	public void run(){
		long t = System.currentTimeMillis();
		long h = 10;
		Measurement measurement;
		while(true){
			measurement = new Measurement(Get input);
			
			
			synchronized (this) {
				currentRegul.calcOut(measurement);
				// Set output
				currentRegul.updateState();
			}
			long thist = System.currentTimeMillis();
			if(thist < t+h){
				try{
					Thread.sleep(t+h-thist);
				}catch (Exception e) {
					System.exit(1);
				}
			}
			t += h;
		}
	}*/
	
	
