
public class Monitor {
	
	private BeamRegul bR;
	private BeamBallRegul bbR;
	private Regul currentRegul;
	private long t;
	private static final int OFF=0, BEAM=1, BALL=2;
	private int state;
	
	/** Constructor*/
	public Monitor() {
		state = OFF;
		bR = new BeamRegul();
		bbR = new BeamBallRegul();
	}
	
	/** called by RegulThread*/
	public synchronized double calcOutput(double y, double yref) {
		t = System.currentTimeMillis();
		return currentRegul.calculateOutput(y, yref);
	}
	
	/** called by RegulThread*/
	public synchronized void updateState(double u) {
		currentRegul.updateState(u);
		notifyAll(); //I am going to sleep now people so you can use the monitor
		
		// sleep
		long duration;
		t = t + currentRegul.getHMillis();
		duration = t - System.currentTimeMillis();
		if (duration > 0) {
			try {
				wait(duration);  
			} catch (InterruptedException x) {
			}
		}
	}
	
	
	
	
	
	
	
	
}	
	
	
	/*
	
	BeamRegul beam;
	BeamBallRegul beamBall;
	BeamBallRegul beamBallThrowSmall;
	BeamBallRegul beamBallThrowMedium;
	BeamBallRegul beamBallThrowBig;

	private Regul currentRegul;
	
	public Main(){
		beam = new BeamRegul();
		//Create other reguls
		beam.setNextRegul(beamBall);
		//Set the rest of the next
		//Do something?
		switchRegul(beam);
	}

	public synchronized void switchRegul(Regul r){
		Regul prevRegul = currentRegul;
		currentRegul = r;
		r.init(System.currentTimeMillis(), prevRegul);
		//r.start()?
	}

	public void run(){
		long t = System.currentTimeMillis();
		long h = 10;
		Measurement measurement;
		while(true){
			measurement = new Measurement(Get input);
			
			
			synchronized (this) {
				currentRegul.calcOut(measurement);
				// Set output
				currentRegul.updateState();
			}
			long thist = System.currentTimeMillis();
			if(thist < t+h){
				try{
					Thread.sleep(t+h-thist);
				}catch (Exception e) {
					System.exit(1);
				}
			}
			t += h;
		}
	}*/
	
	
